/* eslint-disable @typescript-eslint/ban-ts-comment */
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import {ThemeProvider} from "@/providers/theme-provider"
import { NextIntlClientProvider } from "next-intl";
import { getMessages, setRequestLocale } from "next-intl/server";
import { notFound } from "next/navigation";
import { Toaster } from "@/components/ui/toaster";
import { AuthProvider } from "@/providers/AuthProvider";
import { routing } from "@/i18n/routing";
import { QueryProvider } from "@/providers/QueryProvider";
import { getDirection } from "@/i18n/i18n-config";



const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
// const locales = ["ar","en", "te"];

export default async function RootLayout({
  children,
 params:{locale}
}: Readonly<{
  children: React.ReactNode;
  params:{locale:string }
}>) {
    // Ensure that the incoming `locale` is valid
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (!routing.locales.includes(locale as any)) {
      notFound();
    }
    
     
  // // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/ban-ts-comment
   // @ts-ignore
   const messages= await getMessages(locale );
   setRequestLocale(locale)
  return (
    <html lang={locale}
    dir={getDirection(locale)==="rtl"?"rtl":"ltr"}
    
    suppressHydrationWarning
    >
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider locale={locale} messages={messages}>
          <AuthProvider>
            <QueryProvider>

          

         

        
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >

        <Toaster/>
        {children}

        </ThemeProvider>
        </QueryProvider>
        </AuthProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
